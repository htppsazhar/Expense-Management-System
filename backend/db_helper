import mysql.connector
from contextlib import contextmanager
from logging_setup import setup_logger

logger = setup_logger('db_helper')


@contextmanager
def get_db_cursor(commit=False):
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="Iwilldoit100@",
        database="expense_manager"
    )
    cursor = connection.cursor(dictionary=True)
    try:
        yield cursor
        if commit:
            connection.commit()  # For insert/delete/update
    finally:
        cursor.close()
        connection.close()


def insert_expense(expense_date, amount, category, notes):
    logger.info(f"insert_expense called with date: {expense_date}, amount: {amount}, category: {category}, notes: {notes}")
    with get_db_cursor(commit=True) as cursor:
        cursor.execute(
            "INSERT INTO expenses (expense_date, amount, category, notes) VALUES (%s, %s, %s, %s)",
            (expense_date, amount, category, notes)
        )
        logger.info(" Expense inserted successfully!")


def fetch_expense_for_date(expense_date):
    logger.info(f"fetch_expense_for_date called with {expense_date}")
    with get_db_cursor(commit=False) as cursor:
        cursor.execute("SELECT * FROM expenses WHERE expense_date = %s", (expense_date,))
        expenses = cursor.fetchall()
        if expenses:
            logger.info(f"Expenses on {expense_date}: {expenses}")
        else:
            logger.info(f"No expenses found for {expense_date}")
        return expenses


def delete_expense_for_date(expense_date):
    logger.info(f"delete_expense_for_date called with {expense_date}")
    with get_db_cursor(commit=True) as cursor:
        cursor.execute("DELETE FROM expenses WHERE expense_date = %s", (expense_date,))
        logger.info(f"Deleted expenses for date: {expense_date}")


def fetch_expense_summary(start_date, end_date):
    try:
        # Convert dates to ISO format strings if they're date objects
        start_str = start_date.isoformat() if hasattr(start_date, 'isoformat') else str(start_date)
        end_str = end_date.isoformat() if hasattr(end_date, 'isoformat') else str(end_date)

        logger.info(f"Fetching summary between {start_str} and {end_str}")

        with get_db_cursor() as cursor:
            # Execute parameterized query
            cursor.execute(
                '''SELECT category, SUM(amount) as total
                   FROM expenses
                   WHERE expense_date BETWEEN %s AND %s
                   GROUP BY category
                   ORDER BY total DESC;''',  # Added sorting for better usability
                (start_str, end_str)
            )

            data = cursor.fetchall()
            logger.info(f"Found {len(data)} expense categories in date range")

            return data if data else []  # Return empty list instead of None for consistency

    except mysql.connector.Error as e:
        logger.error(f"Database error in fetch_expense_summary: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error in fetch_expense_summary: {e}")
        return None


if __name__ == "__main__":
    expenses = fetch_expense_for_date("2024-08-01")
    print(expenses)
    summary = fetch_expense_summary("2024-08-01", "2024-08-05")
    for record in summary:
        print(record)
